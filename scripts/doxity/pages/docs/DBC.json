{"author":"Melonport AG <team@melonport.com>","title":"Desing by contract (Hoare logic)","fileName":"/./src/dependencies/DBC.sol","name":"DBC","abi":[],"bin":"60606040523415600e57600080fd5b603580601b6000396000f3006060604052600080fd00a165627a7a723058201ed99a39e2303eb1e5dbe4b16b7ab9c010072f67467cffcd5f053481abe8737b0029","opcodes":"PUSH1 0x60 PUSH1 0x40 MSTORE CALLVALUE ISZERO PUSH1 0xE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x35 DUP1 PUSH1 0x1B PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN STOP PUSH1 0x60 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT STOP LOG1 PUSH6 0x627A7A723058 KECCAK256 0x1e 0xd9 SWAP11 CODECOPY 0xe2 ADDRESS RETURNDATACOPY 0xb1 0xe5 0xdb 0xe4 0xb1 PUSH12 0x7AB9C010072F67467CFFCD5F SDIV CALLVALUE DUP2 0xab 0xe8 PUSH20 0x7B00290000000000000000000000000000000000 ","source":"pragma solidity ^0.4.19;\n\n/// @title Desing by contract (Hoare logic)\n/// @author Melonport AG <team@melonport.com>\n/// @notice Gives deriving contracts design by contract modifiers\ncontract DBC {\n\n    // MODIFIERS\n\n    modifier pre_cond(bool condition) {\n        require(condition);\n        _;\n    }\n\n    modifier post_cond(bool condition) {\n        _;\n        assert(condition);\n    }\n\n    modifier invariant(bool condition) {\n        require(condition);\n        _;\n        assert(condition);\n    }\n}\n","abiDocs":[]}
