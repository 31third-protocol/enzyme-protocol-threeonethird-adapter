{"author":"Melonport AG <team@melonport.com>","title":"Desing by contract (Hoare logic)","fileName":"/./src/dependencies/DBC.sol","name":"DBC","abi":[],"bin":"60606040523415600e57600080fd5b603580601b6000396000f3006060604052600080fd00a165627a7a7230582088da7aa217c21c2b2af59b32e8726fe8a91635b66dcf105216243f701f4a02750029","opcodes":"PUSH1 0x60 PUSH1 0x40 MSTORE CALLVALUE ISZERO PUSH1 0xE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x35 DUP1 PUSH1 0x1B PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN STOP PUSH1 0x60 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT STOP LOG1 PUSH6 0x627A7A723058 KECCAK256 DUP9 0xda PUSH27 0xA217C21C2B2AF59B32E8726FE8A91635B66DCF105216243F701F4A MUL PUSH22 0x290000000000000000000000000000000000000000 ","source":"pragma solidity ^0.4.17;\n\n/// @title Desing by contract (Hoare logic)\n/// @author Melonport AG <team@melonport.com>\n/// @notice Gives deriving contracts design by contract modifiers\ncontract DBC {\n\n    // MODIFIERS\n\n    modifier pre_cond(bool condition) {\n        require(condition);\n        _;\n    }\n\n    modifier post_cond(bool condition) {\n        _;\n        assert(condition);\n    }\n\n    modifier invariant(bool condition) {\n        require(condition);\n        _;\n        assert(condition);\n    }\n}\n","abiDocs":[]}
