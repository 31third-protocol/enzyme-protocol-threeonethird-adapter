{"author":"Melonport AG <team@melonport.com>","title":"Desing by contract (Hoare logic)","fileName":"/./src/dependencies/DBC.sol","name":"DBC","abi":[],"bin":"60606040523415600e57600080fd5b603580601b6000396000f3006060604052600080fd00a165627a7a72305820d6b5faf22a4826884e48013c0ac47b4b895c5ee992b97fe3d221ec8a73edce710029","opcodes":"PUSH1 0x60 PUSH1 0x40 MSTORE CALLVALUE ISZERO PUSH1 0xE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x35 DUP1 PUSH1 0x1B PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN STOP PUSH1 0x60 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT STOP LOG1 PUSH6 0x627A7A723058 KECCAK256 0xd6 0xb5 STATICCALL CALLCODE 0x2a 0x48 0x26 DUP9 0x4e 0x48 ADD EXTCODECOPY EXP 0xc4 PUSH28 0x4B895C5EE992B97FE3D221EC8A73EDCE710029000000000000000000 ","source":"pragma solidity ^0.4.11;\n\n/// @title Desing by contract (Hoare logic)\n/// @author Melonport AG <team@melonport.com>\n/// @notice Gives deriving contracts design by contract modifiers\ncontract DBC {\n\n    // MODIFIERS\n\n    modifier pre_cond(bool condition) {\n        require(condition);\n        _;\n    }\n\n    modifier post_cond(bool condition) {\n        _;\n        assert(condition);\n    }\n\n    modifier invariant(bool condition) {\n        require(condition);\n        _;\n        assert(condition);\n    }\n}\n","abiDocs":[]}
