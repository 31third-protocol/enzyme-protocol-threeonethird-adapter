{"author":"Melonport AG <team@melonport.com>","title":"Risk Management Make Orders Contract","fileName":"/./src/riskmgmt/RMMakeOrders.sol","name":"RMMakeOrders","abi":[{"constant":true,"inputs":[],"name":"RISK_LEVEL","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"orderPrice","type":"uint256"},{"name":"referencePrice","type":"uint256"},{"name":"sellAsset","type":"address"},{"name":"buyAsset","type":"address"},{"name":"sellQuantity","type":"uint256"},{"name":"buyQuantity","type":"uint256"}],"name":"isMakePermitted","outputs":[{"name":"isPermitted","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"orderPrice","type":"uint256"},{"name":"referencePrice","type":"uint256"},{"name":"sellAsset","type":"address"},{"name":"buyAsset","type":"address"},{"name":"sellQuantity","type":"uint256"},{"name":"buyQuantity","type":"uint256"}],"name":"isTakePermitted","outputs":[{"name":"isPermitted","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"RISK_DIVISOR","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}],"bin":"6060604052341561000f57600080fd5b6102828061001e6000396000f300606060405260043610610062576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063230a14c01461006757806371ad3e731461009057806380603faa146101245780639460977a146101b8575b600080fd5b341561007257600080fd5b61007a6101e1565b6040518082815260200191505060405180910390f35b341561009b57600080fd5b61010a600480803590602001909190803590602001909190803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919080359060200190919050506101e6565b604051808215151515815260200191505060405180910390f35b341561012f57600080fd5b61019e600480803590602001909190803590602001909190803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190803590602001909190505061021b565b604051808215151515815260200191505060405180910390f35b34156101c357600080fd5b6101cb610250565b6040518082815260200191505060405180910390f35b60c881565b60006127108660c8028115156101f857fe5b0486018711151561020c5760019050610211565b600090505b9695505050505050565b60006127108660c80281151561022d57fe5b048601871115156102415760019050610246565b600090505b9695505050505050565b612710815600a165627a7a72305820d1bf04949fb0108b9b535986557ec470a5e7be641be26f61ed956ffc755b94dc0029","opcodes":"PUSH1 0x60 PUSH1 0x40 MSTORE CALLVALUE ISZERO PUSH2 0xF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x282 DUP1 PUSH2 0x1E PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN STOP PUSH1 0x60 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x62 JUMPI PUSH1 0x0 CALLDATALOAD PUSH29 0x100000000000000000000000000000000000000000000000000000000 SWAP1 DIV PUSH4 0xFFFFFFFF AND DUP1 PUSH4 0x230A14C0 EQ PUSH2 0x67 JUMPI DUP1 PUSH4 0x71AD3E73 EQ PUSH2 0x90 JUMPI DUP1 PUSH4 0x80603FAA EQ PUSH2 0x124 JUMPI DUP1 PUSH4 0x9460977A EQ PUSH2 0x1B8 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE ISZERO PUSH2 0x72 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x7A PUSH2 0x1E1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 0x9B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x10A PUSH1 0x4 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP2 SWAP1 POP POP PUSH2 0x1E6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 0x12F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x19E PUSH1 0x4 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP2 SWAP1 POP POP PUSH2 0x21B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 0x1C3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1CB PUSH2 0x250 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0xC8 DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2710 DUP7 PUSH1 0xC8 MUL DUP2 ISZERO ISZERO PUSH2 0x1F8 JUMPI INVALID JUMPDEST DIV DUP7 ADD DUP8 GT ISZERO ISZERO PUSH2 0x20C JUMPI PUSH1 0x1 SWAP1 POP PUSH2 0x211 JUMP JUMPDEST PUSH1 0x0 SWAP1 POP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2710 DUP7 PUSH1 0xC8 MUL DUP2 ISZERO ISZERO PUSH2 0x22D JUMPI INVALID JUMPDEST DIV DUP7 ADD DUP8 GT ISZERO ISZERO PUSH2 0x241 JUMPI PUSH1 0x1 SWAP1 POP PUSH2 0x246 JUMP JUMPDEST PUSH1 0x0 SWAP1 POP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x2710 DUP2 JUMP STOP LOG1 PUSH6 0x627A7A723058 KECCAK256 0xd1 0xbf DIV SWAP5 SWAP16 0xb0 LT DUP12 SWAP12 MSTORE8 MSIZE DUP7 SSTORE PUSH31 0xC470A5E7BE641BE26F61ED956FFC755B94DC00290000000000000000000000 ","source":"pragma solidity ^0.4.17;\n\nimport '../dependencies/ERC20.sol';\nimport './RiskMgmtInterface.sol';\n\n/// @title Risk Management Make Orders Contract\n/// @author Melonport AG <team@melonport.com>\ncontract RMMakeOrders is RiskMgmtInterface {\n\n      // FIELDS\n\n      uint public constant RISK_LEVEL = 200; // Allows 2 percent deviation from referencePrice\n      uint public constant RISK_DIVISOR = 10000;\n\n      // PRE, POST, INVARIANT CONDITIONS\n\n      function isLessOrEqualThan(uint256 x, uint256 y) internal returns (bool) { return x <= y; }\n\n      // NON-CONSTANT METHODS\n\n      /// @notice Checks if the makeOrder price is within maximum allowed deviation from reference price\n      /// @param orderPrice Price of Order\n      /// @param referencePrice Reference price obtained through PriceFeed contract\n      /// @param sellAsset Asset (as registered in Asset registrar) to be sold\n      /// @param buyAsset Asset (as registered in Asset registrar) to be bought\n      /// @param sellQuantity Quantity of sellAsset to be sold\n      /// @param buyQuantity Quantity of buyAsset to be bought\n      /// @return isPermitted If makeOrder is permitted\n      function isMakePermitted(\n          uint orderPrice,\n          uint referencePrice,\n          address sellAsset,\n          address buyAsset,\n          uint sellQuantity,\n          uint buyQuantity\n      )\n          returns (bool isPermitted)\n      {\n          // Makes sure orderPrice is less than or equal to maximum allowed deviation from reference price\n          if (orderPrice <= referencePrice + RISK_LEVEL * referencePrice / RISK_DIVISOR) {\n              return true;\n          }\n          return false;\n      }\n\n      /// @notice Checks if the takeOrder price is within maximum allowed deviation from reference price\n      /// @param orderPrice Price of Order\n      /// @param referencePrice Reference price obtained through PriceFeed contract\n      /// @param sellAsset Asset (as registered in Asset registrar) to be sold\n      /// @param buyAsset Asset (as registered in Asset registrar) to be bought\n      /// @param sellQuantity Quantity of sellAsset to be sold\n      /// @param buyQuantity Quantity of buyAsset to be bought\n      /// @return isPermitted If takeOrder is permitted\n      function isTakePermitted(\n          uint orderPrice,\n          uint referencePrice,\n          address sellAsset,\n          address buyAsset,\n          uint sellQuantity,\n          uint buyQuantity\n      )\n          returns (bool isPermitted)\n      {\n          // Makes sure orderPrice is less than or equal to maximum allowed deviation from reference price\n          if (orderPrice <= referencePrice + RISK_LEVEL * referencePrice / RISK_DIVISOR) {\n              return true;\n          }\n          return false;\n      }\n}\n","abiDocs":[{"constant":true,"inputs":[],"name":"RISK_LEVEL","payable":false,"stateMutability":"view","type":"function","signature":"RISK_LEVEL()","signatureHash":"230a14c0"},{"constant":false,"inputs":[{"name":"orderPrice","type":"uint256","description":"Price of Order"},{"name":"referencePrice","type":"uint256","description":"Reference price obtained through PriceFeed contract"},{"name":"sellAsset","type":"address","description":"Asset (as registered in Asset registrar) to be sold"},{"name":"buyAsset","type":"address","description":"Asset (as registered in Asset registrar) to be bought"},{"name":"sellQuantity","type":"uint256","description":"Quantity of sellAsset to be sold"},{"name":"buyQuantity","type":"uint256","description":"Quantity of buyAsset to be bought"}],"name":"isMakePermitted","outputs":[{"name":"isPermitted","type":"bool","description":"If makeOrder is permitted"}],"payable":false,"stateMutability":"nonpayable","type":"function","return":"isPermitted If makeOrder is permitted","notice":"Checks if the makeOrder price is within maximum allowed deviation from reference price","signature":"isMakePermitted(uint256,uint256,address,address,uint256,uint256)","signatureHash":"71ad3e73"},{"constant":false,"inputs":[{"name":"orderPrice","type":"uint256","description":"Price of Order"},{"name":"referencePrice","type":"uint256","description":"Reference price obtained through PriceFeed contract"},{"name":"sellAsset","type":"address","description":"Asset (as registered in Asset registrar) to be sold"},{"name":"buyAsset","type":"address","description":"Asset (as registered in Asset registrar) to be bought"},{"name":"sellQuantity","type":"uint256","description":"Quantity of sellAsset to be sold"},{"name":"buyQuantity","type":"uint256","description":"Quantity of buyAsset to be bought"}],"name":"isTakePermitted","outputs":[{"name":"isPermitted","type":"bool","description":"If takeOrder is permitted"}],"payable":false,"stateMutability":"nonpayable","type":"function","return":"isPermitted If takeOrder is permitted","notice":"Checks if the takeOrder price is within maximum allowed deviation from reference price","signature":"isTakePermitted(uint256,uint256,address,address,uint256,uint256)","signatureHash":"80603faa"},{"constant":true,"inputs":[],"name":"RISK_DIVISOR","payable":false,"stateMutability":"view","type":"function","signature":"RISK_DIVISOR()","signatureHash":"9460977a"}]}
