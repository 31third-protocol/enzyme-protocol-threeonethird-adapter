{"author":"Melonport AG <team@melonport.com>","title":"Participation Contract","fileName":"/./src/participation/ParticipationOpen.sol","name":"ParticipationOpen","abi":[{"constant":true,"inputs":[],"name":"owner","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"ofParticipant","type":"address"},{"name":"shareQuantity","type":"uint256"},{"name":"receiveQuantity","type":"uint256"}],"name":"isRedemptionPermitted","outputs":[{"name":"isEligible","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"ofParticipant","type":"address"},{"name":"giveQuantity","type":"uint256"},{"name":"shareQuantity","type":"uint256"}],"name":"isSubscriptionPermitted","outputs":[{"name":"isEligible","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}],"bin":"6060604052336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506101e2806100536000396000f300606060405260043610610057576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680638da5cb5b1461005c578063b558f334146100b1578063e158fa0014610114575b600080fd5b341561006757600080fd5b61006f610177565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156100bc57600080fd5b6100fa600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190803590602001909190505061019c565b604051808215151515815260200191505060405180910390f35b341561011f57600080fd5b61015d600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919080359060200190919050506101a9565b604051808215151515815260200191505060405180910390f35b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600190509392505050565b60006001905093925050505600a165627a7a72305820b933ace58bf9d216da874a37fbf38e4e37ac008e20040d98e4fff6e97675d2460029","opcodes":"PUSH1 0x60 PUSH1 0x40 MSTORE CALLER PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH2 0x1E2 DUP1 PUSH2 0x53 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN STOP PUSH1 0x60 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x57 JUMPI PUSH1 0x0 CALLDATALOAD PUSH29 0x100000000000000000000000000000000000000000000000000000000 SWAP1 DIV PUSH4 0xFFFFFFFF AND DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x5C JUMPI DUP1 PUSH4 0xB558F334 EQ PUSH2 0xB1 JUMPI DUP1 PUSH4 0xE158FA00 EQ PUSH2 0x114 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE ISZERO PUSH2 0x67 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x6F PUSH2 0x177 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 0xBC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xFA PUSH1 0x4 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP2 SWAP1 POP POP PUSH2 0x19C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 0x11F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x15D PUSH1 0x4 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP2 SWAP1 POP POP PUSH2 0x1A9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 DUP1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP STOP LOG1 PUSH6 0x627A7A723058 KECCAK256 0xb9 CALLER 0xac 0xe5 DUP12 0xf9 0xd2 AND 0xda DUP8 0x4a CALLDATACOPY CREATE2 RETURN DUP15 0x4e CALLDATACOPY 0xac STOP DUP15 KECCAK256 DIV 0xd SWAP9 0xe4 SELFDESTRUCT 0xf6 0xe9 PUSH23 0x75D2460029000000000000000000000000000000000000 ","source":"pragma solidity ^0.4.17;\n\nimport './ParticipationInterface.sol';\nimport '../dependencies/DBC.sol';\nimport '../dependencies/Owned.sol';\n\n/// @title Participation Contract\n/// @author Melonport AG <team@melonport.com>\n/// @notice Simple and static Participation Module.\ncontract ParticipationOpen is ParticipationInterface, DBC, Owned {\n\n    // CONSTANT METHODS\n\n    /// @notice Checks whether subscription is permitted for a participant\n    /// @param ofParticipant Address requesting to invest in a Melon fund\n    /// @param giveQuantity Quantity of Melon token times 10 ** 18 offered to receive shareQuantity\n    /// @param shareQuantity Quantity of shares times 10 ** 18 requested to be received\n    /// @return isEligible Whether identity is eligible to invest in a Melon fund.\n    function isSubscriptionPermitted(\n        address ofParticipant,\n        uint256 giveQuantity,\n        uint256 shareQuantity\n    )\n        returns (bool isEligible)\n    {\n        isEligible = true;\n    }\n\n    /// @notice Checks whether redemption is permitted for a participant\n    /// @param ofParticipant Address requesting to redeem from a Melon fund\n    /// @param shareQuantity Quantity of shares times 10 ** 18 offered to redeem\n    /// @param receiveQuantity Quantity of Melon token times 10 ** 18 requested to receive for shareQuantity\n    /// @return isEligible Whether identity is eligible to redeem from a Melon fund.\n    function isRedemptionPermitted(\n        address ofParticipant,\n        uint256 shareQuantity,\n        uint256 receiveQuantity\n    )\n        returns (bool isEligible)\n    {\n        isEligible = true;\n    }\n}\n","abiDocs":[{"constant":true,"inputs":[],"name":"owner","payable":false,"stateMutability":"view","type":"function","signature":"owner()","signatureHash":"8da5cb5b"},{"constant":false,"inputs":[{"name":"ofParticipant","type":"address","description":"Address requesting to redeem from a Melon fund"},{"name":"shareQuantity","type":"uint256","description":"Quantity of shares times 10 ** 18 offered to redeem"},{"name":"receiveQuantity","type":"uint256","description":"Quantity of Melon token times 10 ** 18 requested to receive for shareQuantity"}],"name":"isRedemptionPermitted","outputs":[{"name":"isEligible","type":"bool","description":"Whether identity is eligible to redeem from a Melon fund."}],"payable":false,"stateMutability":"nonpayable","type":"function","return":"isEligible Whether identity is eligible to redeem from a Melon fund.","notice":"Checks whether redemption is permitted for a participant","signature":"isRedemptionPermitted(address,uint256,uint256)","signatureHash":"b558f334"},{"constant":false,"inputs":[{"name":"ofParticipant","type":"address","description":"Address requesting to invest in a Melon fund"},{"name":"giveQuantity","type":"uint256","description":"Quantity of Melon token times 10 ** 18 offered to receive shareQuantity"},{"name":"shareQuantity","type":"uint256","description":"Quantity of shares times 10 ** 18 requested to be received"}],"name":"isSubscriptionPermitted","outputs":[{"name":"isEligible","type":"bool","description":"Whether identity is eligible to invest in a Melon fund."}],"payable":false,"stateMutability":"nonpayable","type":"function","return":"isEligible Whether identity is eligible to invest in a Melon fund.","notice":"Checks whether subscription is permitted for a participant","signature":"isSubscriptionPermitted(address,uint256,uint256)","signatureHash":"e158fa00"}]}
